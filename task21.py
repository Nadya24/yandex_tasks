# Сколько идти до школы?

# Напишите программу, считающую (приближённо) расстояние от вашего дома до вашей школы.

# Адреса школы и дома вводятся пользователем в консоль после запуска программы,
# а в качестве метрики расстояния вам нужно использовать декартову метрику на градусной сетке,
# считая 1 градус по широте равным 111 километрам, а отношение градуса широты и градуса долготы, равным косинусу широты.

# Пояснение: На экваторе длина градуса широты и долготы в метрах совпадают,
# и примерно равны 111 километрам (длина экватора примерно 40000 км, поделить на 360 градусов).
# Однако с увеличением широты появляется разница, так как длина окружности по параллели с ростом широты уменьшается.
#  Представьте себе сечения земного шара плоскостями, параллельными экватору. На полюсах это сечение вырождается в точку касания.
#  Поэтому там длина градуса долготы стремится к нулю. Несложно заметить,
#  что эта зависимость длины градуса по долготе от широты точки выражается косинусом широты.
#   Такой способ вычисления расстояний между точками, заданными широтой и долготой подходит,
#    если точки не сильно удалены друг от друга. На больших расстояниях такой метод дает большую погрешность и потому неприменим.

# Итого: 1 грд. широты = 111 км. 1 грд. долготы = 111 км * cos(широты).

# Проверьте: расстояние между точками (долгота, широта): (37.6222, 55.7566) и (37.6589, 55.7583) составляет 2300 метров.
#
#

# Длина пути
# Определите длину пути, заданного последовательностью точек.

# Отобразите заданный путь на карте, а в средней его точке поставьте метку.

# Последовательность точек задайте по своему усмотрению,
# например, списком координат.

from geopy.distance import geodesic
import requests
import json

API_KEY = '48816329-7532-4737-8718-e8cd550efe71'
URL = 'https://geocode-maps.yandex.ru/1.x/?apikey=%s&format=json&geocode=%s'


def main():
    from_addr = input("Укажите адрес дома")
    to_addr = input("Укажите адрес школы")
    dist = 0
    lat = []
    lon = []

    for address in [from_addr, to_addr]:
        page = requests.get(URL % (API_KEY, address.strip()))
        d = json.loads(page.text)
        GeoObjectCollection = d['response']['GeoObjectCollection']
        GeoObject = GeoObjectCollection['featureMember'][0]['GeoObject']
        print(GeoObject)
        Point = GeoObject['Point']['pos']
        print(Point)
        lat = Point.split(" ")[0]
        print(lat)
        lon = Point.split(" ")[1]
        print(lon)
        dist += geodesic(float(lat), float(lon)).km

    print(dist)

if __name__ == "__main__":
    main()
